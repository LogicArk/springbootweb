
#服务名称
spring.application.name=ribbon-eureka-demo

#服务端口
server.port=8080

#eureka注册中心地址
eureka.client.serviceUrl.defaultZone=http://logicark:123456@localhost:8761/eureka/

# 采用IP注册
eureka.instance.prefer-ip-address=true

# 定义实例ID格式
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

#自定义实例跳转链接(eureka管理界面当前实例点击后的跳转地址)
eureka.instance.status-page-url=http://c.biancheng.net

#开启健康检查 (需要在 pom.xml 中引入 actuator 的依赖)
eureka.client.healthcheck.enabled=true
#Eureka Client 发送心跳给Eureka Server 端的频率，指定续约更新频率。如果在eureka在eureka.instance.lease-renewal-interval-in-seconds后没有收到心跳，将摘除改实例。
eureka.instance.lease-renewal-interval-in-seconds=5
#表示 Eureka Server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则移除该 Instance
# (该值至少应该大于leaseRenewalIntervalInSeconds)
eureka.instance.lease-expiration-duration-in-seconds=5

#自定义元数据说得通俗点就是自定义配置，我们可以为每个 Eureka Client 定义一些属于自己的配置，这个配置不会影响 Eureka 的功能。
eureka.instance.metadataMap.biancheng=logicark

#Ribbon 的客户端是在第一次请求的时候初始化的，如果超时时间比较短的话，初始化 Client 的时间再加上请求接口的时间，就会导致第一次请求超时。
#通过配置 eager-load 来提前初始化客户端就可以解决这个问题。
#开启 Ribbon 的饥饿加载模式。
ribbon.eager-load.enabled=true
#指定需要饥饿加载的服务名，也就是你需要调用的服务，若有多个则用逗号隔开。
ribbon.eager-load.clients=ribbon-eureka-demo

#配置的方式使用自定义的负载策略 (ribbon-eureka-demo 是调用的服务名称)
#ribbon-eureka-demo.ribbon.NFLoadBalancerRuleClassName=net.biancheng.springresttemplate.rule.MyRule


#【Ribbon常用配置】
#1. 禁用 Eureka
#当我们在 RestTemplate 上添加 @LoadBalanced 注解后，就可以用服务名称来调用接口了，当有多个服务的时候，还能做负载均衡。
#这是因为 Eureka 中的服务信息已经被拉取到了客户端本地，如果我们不想和 Eureka 集成，可以通过下面的配置方法将其禁用。
# 禁用 Eureka
ribbon.eureka.enabled=false

#2. 配置接口地址列表
#上面我们讲了可以禁用 Eureka，禁用之后就需要手动配置调用的服务地址了，配置如下：
# 禁用 Eureka 后手动配置服务地址(ribbon-eureka-demo表示需要调用的服务名)
ribbon-eureka-demo.ribbon.listOfServers=localhost:8081,localhost:8083

#4. 超时时间
# 请求连接的超时时间
ribbon.ConnectTimeout=2000
# 请求处理的超时时间
ribbon.ReadTimeout=5000

#也可以为每个Ribbon客户端设置不同的超时时间, 通过服务名称进行指定：
ribbon-eureka-demo.ribbon.ConnectTimeout=2000
ribbon-eureka-demo.ribbon.ReadTimeout=5000

